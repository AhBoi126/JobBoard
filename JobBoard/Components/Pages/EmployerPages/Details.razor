@page "/employers/details"
@using Microsoft.EntityFrameworkCore
@using FullStackProject.Domain
@inject IDbContextFactory<JobBoard.Data.JobBoardContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Employer</h2>
    <hr />
    @if (employer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@employer.FirstName</dd>
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@employer.LastName</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@employer.Email</dd>
            <dt class="col-sm-2">Contact</dt>
            <dd class="col-sm-10">@employer.Contact</dd>
            <dt class="col-sm-2">ComapanyID</dt>
            <dd class="col-sm-10">@employer.ComapanyID</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@employer.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@employer.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@employer.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@employer.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/employers/edit?id={employer.Id}")">Edit</a> |
            <a href="@($"/employers")">Back to List</a>
        </div>
    }
</div>

@code {
    private Employer? employer;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        employer = await context.Employer.FirstOrDefaultAsync(m => m.Id == Id);

        if (employer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
