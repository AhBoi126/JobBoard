@page "/messages/details"
@using Microsoft.EntityFrameworkCore
@using FullStackProject.Domain
@inject IDbContextFactory<JobBoard.Data.JobBoardContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Message</h2>
    <hr />
    @if (message is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">MessageContent</dt>
            <dd class="col-sm-10">@message.MessageContent</dd>
            <dt class="col-sm-2">ReadStatus</dt>
            <dd class="col-sm-10">@message.ReadStatus</dd>
            <dt class="col-sm-2">JobSeekerID</dt>
            <dd class="col-sm-10">@message.JobSeekerID</dd>
            <dt class="col-sm-2">EmployerID</dt>
            <dd class="col-sm-10">@message.EmployerID</dd>
            <dt class="col-sm-2">ChatBoxID</dt>
            <dd class="col-sm-10">@message.ChatBoxID</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@message.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@message.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@message.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@message.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/messages/edit?id={message.Id}")">Edit</a> |
            <a href="@($"/messages")">Back to List</a>
        </div>
    }
</div>

@code {
    private Message? message;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        message = await context.Message.FirstOrDefaultAsync(m => m.Id == Id);

        if (message is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
